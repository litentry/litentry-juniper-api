extern crate substrate_api_client;
extern crate codec;
extern crate primitives;
extern crate log;

use codec::{Encode, Decode};

use substrate_api_client::{
    Api,
    compose_extrinsic,
    crypto::{AccountKey, CryptoKind},
    extrinsic,
    extrinsic::{balances, xt_primitives, contract}
};

fn main() {

    let url = "192.168.2.158:9944";
    let from = AccountKey::new("//Alice", Some(""), CryptoKind::Sr25519);
    let api = Api::new(format!("ws://{}", url))
        .set_signer(from);

    println!("[+] Alice's Account Nonce is {}\n", api.get_nonce().unwrap());
    let to = AccountKey::public_from_suri("//Bob", Some(""), CryptoKind::Sr25519);

    // Exchange "Balance" and "transfer" with the names of your custom runtime module. They are only
    // used here to be able to run the examples against a generic substrate node with standard modules.
    let xt = compose_extrinsic!(
        api.clone(),
        "Balances",
        "transfer",
        GenericAddress::from(to),
        Compact(42 as u128)
    );

    println!("[+] Composed Extrinsic:\n {:?}\n", xt);

    //send and watch extrinsic until finalized
    let tx_hash = api.send_extrinsic(xt.hex_encode()).unwrap();
    println!("[+] Transaction got finalized. Hash: {:?}", tx_hash);

}